class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        if (nums.size() == 0 || k == 0) {
            return {};
        }
        vector<double> ans;
        vector<int> buf(nums.begin(), nums.begin() + k - 1);
        sort(buf.begin(), buf.end());
        for (int i = k - 1; i != nums.size(); i++) {
            auto it = upper_bound(buf.begin(), buf.end(), nums[i]);
            buf.insert(it, nums[i]);
            if (k & 1) {
                ans.push_back(buf[k / 2]);
            } else {
                ans.push_back((buf[k / 2] * 1.0 + buf[k / 2 - 1]) / 2);
            }
            it = lower_bound(buf.begin(), buf.end(), nums[i - k + 1]);
            buf.erase(it);
        }
        return ans;
    }
};
