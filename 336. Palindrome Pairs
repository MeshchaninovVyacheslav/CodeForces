C++

class Solution {
    
public:
    vector<vector<int>> palindromePairs(vector<string>& words) {
        vector<vector<int>> ans;
        auto IsPalindrome = [&](int i, int j) {
            int l1 = words[i].length(), l2 = words[j].length();
            if (l1 > l2) {
                for (int k = 0; k < l2; k++) {
                    if (words[i][k] != words[j][l2 - k - 1]) {
                        return 0;
                    }
                }
                for (int k = l2; k < l1; k++) {
                    if (words[i][k] != words[i][l1 - (k - l2) - 1]) {
                        return 0;
                    }
                }
            } else {
                for (int k = 0; k < l1; k++) {
                    if (words[i][k] != words[j][l2 - k - 1]) {
                        return 0;
                    }
                }
                for (int k = 0; k < l2 - l1; k++) {
                    if (words[j][k] != words[j][l2 - l1 - k - 1]) {
                        return 0;
                    }
                }
            }
            return 1;
        };
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i == j) {
                    continue;
                }
                if (IsPalindrome(i, j)) {
                    ans.push_back({i, j});
                }
            }
        }
        return ans;
    }
};
